<table>
    <thead>
        <tr>
            <% Object.keys(data[0]).forEach(function(key) { %>
            <th><%= key %></th>
            <% }); %>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        <% data.forEach(function(row) { %>
        <tr>
            <% for(let value of Object.values(row)) { %>
            <td><%= value %></td>
            <% } %>
            <td>
                <button class="update-button">Update</button>
                <button class="delete-button">Delete</button>
            </td>
        </tr>
        <% }); %>
    </tbody>
</table>

This template will create a table with a header row based on the keys of the
objects in the data array, and a row for each object in the array. Each row will
have an Update and Delete button. In your route handlers, you can render this
template and pass the data to it: router.get('/', function(req, res, next) { try
{ jobOfferModel.readall( function(result) { if (result) { res.render('table', {
title: 'Liste des offres d'emploi', data: result, }); } else { throw new
Error('Aucune offre d'emploi trouv√©e.'); } }); } catch (error) {
res.status(500).json({ error: 'Echec de la lecture des offres d'emploi.', });
console.log('Echec de la lecture (readall) de la table offreDemploi: ' + error);
next(error); } }); This will render the table.ejs template and pass the result
of the database query to it as data. Please note that this is a basic example
and may need to be adjusted based on your specific needs, such as adding URLs or
data attributes to the Update and Delete buttons, or handling special cases in
the data.
