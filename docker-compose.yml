version: "3.8"

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: recruitment_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-recruitment_webapp}
      POSTGRES_USER: ${DB_USER:-recruitment_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_123}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/dbInit.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - recruitment_network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DB_USER:-recruitment_user} -d ${DB_NAME:-recruitment_webapp}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Node.js Web Application
  web:
    image: ghcr.io/daryltamo/recruitment-webapp:latest
    container_name: recruitment-webapp
    restart: unless-stopped
    env_file: .env
    ports:
      - "3000:3000"
    networks:
      - recruitment_network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # pgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: recruitment_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@recruitment-app.com
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin_password_123}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - recruitment_network
    depends_on:
      db:
        condition: service_healthy
    profiles:
      - development

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  recruitment_network:
    driver: bridge
